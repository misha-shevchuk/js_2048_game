{"version":3,"sources":["scripts/main.js"],"names":["columns","rows","Array","from","document","querySelectorAll","cells","cellsInRow","map","row","i","j","push","children","button","querySelector","startMessage","loseMessage","winMessage","score","moveSound","getElementById","looseSound","winSound","clearCells","getRandomCell","Math","floor","random","length","getCellValue","newCell","randomCell","randomValue","className","innerText","splice","indexOf","started","startGame","style","display","restartGame","classList","add","forEach","cell","canBeMerged","wholeField","some","line","addEventListener","flipped","flipLine","canBeMooved","includes","mergeAllowed","dataset","blocked","mergeCells","flipElements","curr","prev","value","deleteElement","remove","currentTime","play","filter","element","getDirection","direction","up","column","reverse","down","right","left","removeAttribute","body","evnt","key","preventDefault"],"mappings":"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","file":"main.56d634dc.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst columns = [[], [], [], []];\nconst rows = Array.from(document.querySelectorAll('.field-row'));\nconst cells = document.querySelectorAll('.field-cell');\nconst cellsInRow = rows.map(row => [...row.querySelectorAll('.field-cell')]);\n\nfor (let i = 0; i < 4; i++) {\n  for (let j = 0; j < 4; j++) {\n    columns[j].push(rows[i].children[j]);\n  }\n}\n\nconst button = document.querySelector('.start');\nconst startMessage = document.querySelector('.message-start');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\nconst score = document.querySelector('.game-score');\nconst moveSound = document.getElementById('audio-move');\nconst looseSound = document.getElementById('audio-loose');\nconst winSound = document.getElementById('audio-win');\n\nlet clearCells = [...cells];\n\nfunction getRandomCell() {\n  return clearCells[Math.floor(Math.random() * clearCells.length)];\n}\n\nfunction getCellValue() {\n  return Math.random() < 0.9 ? 2 : 4;\n}\n\nfunction newCell() {\n  if (!clearCells.length) {\n    return;\n  }\n\n  const randomCell = getRandomCell();\n  const randomValue = getCellValue();\n\n  randomCell.className = `field-cell field-cell--${randomValue}`;\n  randomCell.innerText = randomValue;\n\n  clearCells.splice(clearCells.indexOf(randomCell), 1);\n}\n\nlet started = false;\n\nfunction startGame() {\n  startMessage.style.display = 'none';\n  button.className = 'button restart';\n  button.innerText = 'Restart';\n\n  newCell();\n  newCell();\n  started = true;\n}\n\nfunction restartGame() {\n  loseMessage.classList.add('hidden');\n  winMessage.classList.add('hidden');\n  clearCells = [...cells];\n  score.innerText = 0;\n\n  cells.forEach(cell => {\n    cell.innerText = '';\n    cell.className = 'field-cell';\n  });\n\n  newCell();\n  newCell();\n}\n\nbutton.addEventListener('click', () => {\n  if (!started) {\n    startGame();\n  } else {\n    restartGame();\n  }\n});\n\nfunction canBeMerged() {\n  const wholeField = [...cellsInRow, ...columns];\n\n  return wholeField.some((line) => {\n    for (let i = 0; i < 3; i++) {\n      if (line[i].innerText === line[i + 1].innerText) {\n        return true;\n      }\n    }\n\n    return false;\n  });\n}\n\nlet flipped = false;\n\nfunction flipLine(line) {\n  for (let i = 3; i > 0; i--) {\n    const canBeMooved = clearCells.includes(line[i])\n      && !clearCells.includes(line[i - 1]);\n    const mergeAllowed = line[i].innerText === line[i - 1].innerText\n      && line[i].innerText.length\n      && !line[i - 1].dataset.blocked;\n\n    if ((mergeAllowed || canBeMooved) && !flipped) {\n      flipped = true;\n    }\n\n    if (mergeAllowed) {\n      mergeCells(line[i], line[i - 1]);\n      flipLine(line);\n    }\n\n    if (canBeMooved) {\n      flipElements(line[i], line[i - 1]);\n      flipLine(line);\n    }\n  }\n}\n\nfunction mergeCells(curr, prev) {\n  const value = curr.innerText * 2;\n\n  curr.innerText = value;\n  curr.className = `field-cell field-cell--${value}`;\n  score.innerText = +score.innerText + value;\n  deleteElement(prev);\n\n  curr.dataset.blocked = true;\n  prev.dataset.blocked = true;\n\n  if (value === 2048) {\n    winMessage.classList.remove('hidden');\n    winSound.currentTime = 0;\n    winSound.play();\n  }\n}\n\nfunction flipElements(curr, prev) {\n  curr.innerText = prev.innerText;\n  curr.className = prev.className;\n  clearCells = clearCells.filter(cell => cell !== curr);\n  deleteElement(prev);\n}\n\nfunction deleteElement(element) {\n  element.innerText = '';\n  element.className = 'field-cell';\n  clearCells.push(element);\n}\n\nfunction getDirection(direction) {\n  if (!clearCells.length && !canBeMerged()) {\n    loseMessage.classList.remove('hidden');\n    looseSound.currentTime = 0;\n    looseSound.play();\n  }\n\n  const up = 'ArrowUp';\n  const down = 'ArrowDown';\n  const right = 'ArrowRight';\n  const left = 'ArrowLeft';\n\n  switch (direction) {\n    case up:\n      columns.forEach((column) => {\n        flipLine([...column].reverse());\n      });\n      break;\n\n    case down:\n      columns.forEach((column) => {\n        flipLine(column);\n      });\n      break;\n\n    case right:\n      cellsInRow.forEach((row) => {\n        flipLine(row);\n      });\n      break;\n\n    case left:\n      cellsInRow.forEach((row) => {\n        flipLine([...row].reverse());\n      });\n      break;\n\n    default:\n      break;\n  }\n\n  cells.forEach(cell => {\n    cell.removeAttribute('data-blocked');\n  });\n}\n\ndocument.body.addEventListener('keydown', (evnt) => {\n  const arrowDirections = [\n    'ArrowUp',\n    'ArrowDown',\n    'ArrowLeft',\n    'ArrowRight',\n  ];\n\n  if (arrowDirections.includes(evnt.key)) {\n    evnt.preventDefault();\n    getDirection(evnt.key);\n\n    if (flipped) {\n      moveSound.currentTime = 0;\n      moveSound.play();\n      newCell();\n      flipped = false;\n    }\n  }\n});\n"]}